1. kernel层电流从高电平，被触摸后中断到低电平，写入文件/dev/input，耗时为25ms
01-01 00:51:11.364515     0     0 W [ 2221.124665] (3)[2065:AsyncTask #1]: pn544_enable_irq
01-01 00:51:11.397002     0     0 W [ 2221.157152] (3)[2066:AsyncTask #1]: [fangzhihua] pn544_dev_write ,CONFIG_MTK_I2C_EXTENSION   w2

2. 从驱动报上来的Event由HAL层InputReader，EventHub和InputDispatcher来处理，下面的博客写得很详细。
  2.1 http://blog.csdn.net/u011630458/article/details/22314243
  2.2 http://www.cnblogs.com/lcw/p/3374466.html
  2.3 http://www.cnblogs.com/lcw/p/3506110.html
  2.4 http://www.cnblogs.com/lcw/p/3373214.html
  2.5 InputDispatcher通过管道通知WindowManagerService有新的Event，在通过共享内存给ViewRootImpl。

InputReader.cpp 代码流程
void InputReader::loopOnce()
void InputReader::processEventsLocked(const RawEvent* rawEvents, size_t count)
void InputReader::processEventsForDeviceLocked(int32_t deviceId, const RawEvent* rawEvents, size_t count)
void InputDevice::process(const RawEvent* rawEvents, size_t count)
void TouchInputMapper::process(cont RawEvent* rawEvent)
void TouchInputMapper::sync(nsecs_t when)
void TouchInputMapper::processRawTouches(bool timeout)
void TouchInputMapper::cookAndDispatch(nsecs_t when)
void TouchInputMapper::dispatchTouches(nsecs_t when, uint32_t policyFlags)
void TouchInputMapper::dispatchMotion(...)

3. HAL层共享Event到Framework层进行处理。
  3.1 在View.onTouchEvent中发现isInScrollingContainer为true
  01-01 00:28:17.067  2913  2913 D View    : (View)Touch down: isInScrollingContainer = true,this = com.android.phone.common.dialpad.DialpadKeyButton{b80d017 VFE...C.. ........ 256,0-464,96 #7f0a013f app:id/five}

  如果此isInScrollingContainer为ture，就会走postDelayed，ViewConfiguration.getTapTimeout()为100ms的延迟。
  case MotionEvent.ACTION_DOWN:
      if(isInScrollingContainer){ 
          ... 
          postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());
          ... 
      } else { 
          ... 
          setPressed(true, x, y);
      }

  public boolean isInScrollingContainer(){
      ViewParent p = getParent();
      while(p != null && p instanceof ViewGroup){
          if(((ViewGroup)p).shouldDelayChildPressedState()){
              return true;
          }
          p = p.getParent();
      }
      return false;
  }

  3.2 ViewGrouop.shouldDelayChildPressedState默认返回true，这是为了判断控件是否是需要判断操作为滑动操作，进行延时处理子控件的点击状态。可以在子类中override此方法
  public boolean shouldDelayChildPressedState(){
      return true;
  }

  3.3 检查Dialpad的布局发现dialtacts_activity.xml中anroid.support.design.widget.CoordinatorLayout文件没有override上述方法，修改后log如下。但是CoordinatorLayout是系统控件，可能会影响其他模块的使用者，所以还需评估修改，可以重新自顶一个View继承自CoordinatorLayout并override上述方法。


修改前 143ms
01-01 00:28:17.029   993  1258 E EventHub: songkun EventHub::getEvents
01-01 00:28:17.030   993  1258 D InputReader: AP_PROF:AppLaunch_dispatchPtr:Down:1773396, ID:0, Index:-1676216432
01-01 00:28:17.177  2913  2913 D DialpadFragment: songkun onPressed(). view: com.android.phone.common.dialpad.DialpadKeyButton{b80d017 VFE...C.. ...P..ID 256,0-464,96 #7f0a013f app:id/five}, pressed: true
修改后 56ms
01-01 00:03:52.912   982  1254 E EventHub: songkun EventHub::getEvents
01-01 00:03:52.912   982  1254 D InputReader: AP_PROF:AppLaunch_dispatchPtr:Down:304573, ID:0, Index:-1544095856
01-01 00:03:52.968  2902  2902 D DialpadFragment: songkun onPressed(). view: com.android.phone.common.dialpad.DialpadKeyButton{4d533bc VFE...C.. ...P..ID 464,0-672,96 #7f0a0140 app:id/six}, pressed: true

Framework层流程
android.view.InputEventReceiver.dispatchInputEvent
android.view.ViewRootImpl$WindowInputEventReceiver.onInputEvent
android.view.ViewRootImpl.enqueueInputEvent
android.view.ViewRootImpl.doProcessInputEvents
android.view.ViewRootImpl.deliverInputEvent
android.view.ViewRootImpl$InputStage.deliver
android.view.ViewRootImpl$InputStage.apply
android.view.ViewRootImpl$InputStage.forward
android.view.ViewRootImpl$InputStage.onDeliverToNext
android.view.ViewRootImpl$InputStage.deliver
android.view.ViewRootImpl$AsyncInputStage.apply
android.view.ViewRootImpl$InputStage.apply
android.view.ViewRootImpl$AsyncInputStage.forward
android.view.ViewRootImpl$InputStage.forward
android.view.ViewRootImpl$InputStage.onDeliverToNext
android.view.ViewRootImpl$InputStage.deliver
android.view.ViewRootImpl$ViewPostImeInputStage.onProcess
android.view.ViewRootImpl$ViewPostImeInputStage.processPointerEvent
android.view.View.dispatchPointerEvent
android.view.View.onTouchEvent
com.android.internal.policy.impl.PhoneWindow$DecorView.dispatchTouchEvent
com.android.phone.common.dialpad.MainActivity.dispatchTouchEvent

4. App层给驱动Vibrator硬件写入文件，Vibrator上电震动，时间大约为13ms

App层流程
packages/apps/Dialer/src/com/android/dialpadDialpadFragment.java
TAG = "DialpadFragment"
    public void onPressed(View view, boolean pressed){
        ...
        Log.d(TAG, "onPressed(). view: " + view + ", pressed: " + pressed);
        ...
    }
    private void keyPressed(int keyCode) {
        ...
        Log.d(TAG, "songkun performHapticFeedback begin");
        getView().performHapticFeedback(HapticFeedbackConstants.VIRTUAL_KEY);
        Log.d(TAG, "songkun performHapticFeedback end");
        ...
    }
    private void playTone(int tone, int durationMs) {
        int ringerMode == audioManager.getRingerMode();
        Log.d(TAG, "songkun playTone(). tone: " + tone + " .durationMs: " + durationMs + " .ringerMode: " + ringerMode);
        ...
        synchronized (mToneGeneratorLock) {
            Log.d(TAG, "songkun playTone() mToneGenerator.startTone(tone, durationMs));
        }
    }
    
Framework层流程
View.java
  performHapticFeedback
    mAttachInfo.mRootCallbacks.performHapticFeedback
      Log.d(VIEW_LOG_TAG, "songkun performHapticFeedback(). feedbackConstant: " + feedbackConstant + " .flags " + flags);

ViewRootImpl.java
  performHapticFeedback
    mWindowSession.performHapticFeedback
      Log.d(mTag, "songkun performHapticFeedback(). effectId: " + effectId + " .always " + always);

Session.java
  PhoneWindowManager
    mService.mPolicy.performHapticFeedbackLw
      Log.d("Session", "songkun performHapticFeedback(). effectId: " + effectId + " .always " + always);

PhoneWindowManager.java
  performHapticFeedbackLw
    mVibrator.vibrate
      Log.d(TAG, "songkun performHapticFeedback(). effectId: " + effectId + " .always " + always);

SystemVibrator.java
  vibrate
    mService.vibratePattern
      Log.d(TAG, "songkun vibrate() .uid " + uid + " .opPkg " + opPkg);

VibratorService.java
  vibratePattern
    startVibrationLocked(vib)
      Log.d(TAG, "songkun vibratePattern() .repeat " + repeat);

  startVibrationLocked(vib)
    //mH.postDelayed(mVibrationRunnable, vib.mTimeout);
    mThread = new VibrateThread(vib)
      Log.d(TAG, "songkun startVibrationLocked() .vib.mTimeout " + vib.mTimeout);

  class VibrateThread
    VibratorService.this.doVibratorOn(duration, uid, usageHint);
      Log.d(TAG, "songkun VibrateThread.run() duration " + duration + " index " + index + " uid " + uid + " usageHint " + usageHint);

  doVibratorOn(duration, uid, usageHint)
    native static void vibratorOn(long milliseconds)
      Log.d(TAG, "songkun doVibratorOn() .vibratorOn()");

frameworks/base/services/core/jni/com_android_server_VibratorService.cpp
  static void vibrator(JNIEnv* , jobject, jlong timeout_ms)
    gVibraDevice->vibrator_on(gVibraDevice, timeout_ms)

HAL层流程
vibrator.c
  static int vibra_on(vibradev __unused, timeout_ms)
    sendit(timeout_ms)
      ALOGE("songkun vibrator_on");

  sendit(unsigned int timeout_ms)
    ALOGE("songkun sendit");

